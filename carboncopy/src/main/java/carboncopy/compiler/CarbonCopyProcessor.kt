package carboncopy.compiler


import carboncopy.annotations.CarbonCopy
import carboncopy.compiler.builder.BindingManager
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.RoundEnvironment
import javax.lang.model.SourceVersion
import javax.lang.model.element.ElementKind
import javax.lang.model.element.Modifier
import javax.lang.model.element.TypeElement
import javax.tools.Diagnostic


/**
 * AnnotationProcessor that processes the @[CarbonCopy] annotations and
 * generates the CarbonCopy classes
 *
 * @author js
 */
open class CarbonCopyProcessor : AbstractProcessor() {


    /**
     * Supported top level annotation --  @[CarbonCopy]
     */
    private val supportedAnnotations = setOf(CarbonCopy::class.java)


    override fun getSupportedAnnotationTypes() = supportedAnnotations.map { it.canonicalName }.toSet()

    override fun getSupportedSourceVersion(): SourceVersion = SourceVersion.latestSupported()

    /**
     * Start of the annotation process
     */
    override fun process(annotations: Set<TypeElement>, env: RoundEnvironment): Boolean {
        val converterClassBuilder = TypeSpec
                .classBuilder("CarbonCopyConverter")
                .addJavadoc("Converts a source class to and from its carbon copy\n")
                .addJavadoc("Auto-generated by <a href=\"https://bit.ly/CarbonCopyLibrary\">CarbonCopy</a>\n")
                .addModifiers(Modifier.PUBLIC)
                .addMethod(MethodSpec.methodBuilder("convert")
                        .returns(ClassName.get(Object::class.java))
                        .addParameter(ClassName.get(Object::class.java), "source")
                        .addModifiers(Modifier.STATIC, Modifier.PUBLIC)
                        .addStatement("return source").build())

        var copyCount = 0
        for (element in env.getElementsAnnotatedWith(CarbonCopy::class.java)) {
            if (element.kind == ElementKind.CLASS) {
                BindingManager(processingEnv, element, converterClassBuilder).generateCarbonCopy()
                copyCount++
            } else {
                processingEnv.messager.printMessage(Diagnostic.Kind.WARNING, "@CarbonCopy is expected only for class. Ignoring " + element.simpleName)
            }
        }

        if (copyCount > 0) {
            JavaFile.builder("carboncopy", converterClassBuilder.build()).build().writeTo(processingEnv.filer)
        }
        return false
    }
}
